/// Code generated by msg.go; DO NOT EDIT.

package game

import (
	"github.com/json-iterator/go"
	"gitlab.com/megatech/serverex/apps/excalibur/protocol/msg"
)

func (g *GameService) rpc_dispatch(req *msg.Request) *msg.Response {

	switch req.Code {

	case msg.C_GetUserInfo:
		arg := &msg.GetUserInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetUserInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_EnterStage:
		arg := &msg.EnterStageRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.EnterStage(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExitStage:
		arg := &msg.ExitStageRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExitStage(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_BattleStart:
		arg := &msg.BattleStartRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.BattleStart(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_BattleEnd:
		arg := &msg.BattleEndRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.BattleEnd(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_EnterDungeon:
		arg := &msg.EnterDungeonRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.EnterDungeon(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExitDungeon:
		arg := &msg.ExitDungeonRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExitDungeon(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Reborn:
		arg := &msg.RebornRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Reborn(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_OpenBox:
		arg := &msg.OpenBoxRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.OpenBox(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PickupLoot:
		arg := &msg.PickupLootRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PickupLoot(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Equip:
		arg := &msg.EquipRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Equip(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Unequip:
		arg := &msg.UnequipRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Unequip(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Craft:
		arg := &msg.CraftRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Craft(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Decompose:
		arg := &msg.DecomposeRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Decompose(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Enhance:
		arg := &msg.EnhanceRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Enhance(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ConsumItem:
		arg := &msg.ConsumItemRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ConsumItem(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ListOnSale:
		arg := &msg.ListOnSaleRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ListOnSale(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_RefreshOnSale:
		arg := &msg.RefreshOnSaleRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.RefreshOnSale(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_Purchase:
		arg := &msg.PurchaseRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.Purchase(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ListDiamondPrice:
		arg := &msg.ListDiamondPriceRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ListDiamondPrice(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_SubmitOrder:
		arg := &msg.SubmitOrderRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.SubmitOrder(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_QueryOrderStatus:
		arg := &msg.QueryOrderStatusRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.QueryOrderStatus(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_LevelUp:
		arg := &msg.LevelUpRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.LevelUp(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_JobUpgrade:
		arg := &msg.JobUpgradeRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.JobUpgrade(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_RuneEquip:
		arg := &msg.RuneEquipRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.RuneEquip(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_RuneUnequip:
		arg := &msg.RuneUnequipRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.RuneUnequip(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExpandBagCell:
		arg := &msg.ExpandBagCellRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExpandBagCell(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExpandStashCell:
		arg := &msg.ExpandStashCellRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExpandStashCell(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_MoveItemsBagToStash:
		arg := &msg.MoveItemsBagToStashRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.MoveItemsBagToStash(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_MoveItemsStashToBag:
		arg := &msg.MoveItemsStashToBagRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.MoveItemsStashToBag(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_MoveGoldBagToStash:
		arg := &msg.MoveGoldBagToStashRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.MoveGoldBagToStash(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_MoveGoldStashToBag:
		arg := &msg.MoveGoldStashToBagRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.MoveGoldStashToBag(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_DestroyItem:
		arg := &msg.DestroyItemRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.DestroyItem(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_DestroyMultipleItem:
		arg := &msg.DestroyMultipleItemRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.DestroyMultipleItem(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_DestroyItemsInStash:
		arg := &msg.DestroyItemsInStashRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.DestroyItemsInStash(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_SortItemsInBag:
		arg := &msg.SortItemsInBagRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.SortItemsInBag(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_SortItemsInStash:
		arg := &msg.SortItemsInStashRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.SortItemsInStash(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_RefreshDiamond:
		arg := &msg.RefreshDiamondRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.RefreshDiamond(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetUserStatInfo:
		arg := &msg.GetUserStatInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetUserStatInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_UserRename:
		arg := &msg.UserRenameRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.UserRename(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PresentRedeemCode:
		arg := &msg.PresentRedeemCodeRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PresentRedeemCode(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ListNoticeInfo:
		arg := &msg.ListNoticeInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ListNoticeInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ConfirmNoticeInfo:
		arg := &msg.ConfirmNoticeInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ConfirmNoticeInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_DeleteNoticeInfo:
		arg := &msg.DeleteNoticeInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.DeleteNoticeInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_MarkAsReadNoticeInfo:
		arg := &msg.MarkAsReadNoticeInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.MarkAsReadNoticeInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetExploreInfo:
		arg := &msg.GetExploreInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetExploreInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_AddExploreChargeCount:
		arg := &msg.AddExploreChargeCountRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.AddExploreChargeCount(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ReduceExploreTime:
		arg := &msg.ReduceExploreTimeRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ReduceExploreTime(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExploreStart:
		arg := &msg.ExploreStartRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExploreStart(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExploreViewAward:
		arg := &msg.ExploreViewAwardRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExploreViewAward(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ExploreEnd:
		arg := &msg.ExploreEndRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ExploreEnd(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PuzzleStart:
		arg := &msg.PuzzleStartRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PuzzleStart(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PuzzleUpdateProcess:
		arg := &msg.PuzzleUpdateProcessRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PuzzleUpdateProcess(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PuzzleEnd:
		arg := &msg.PuzzleEndRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PuzzleEnd(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_ActiveNewCharacter:
		arg := &msg.ActiveNewCharacterRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.ActiveNewCharacter(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_KillCharacter:
		arg := &msg.KillCharacterRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.KillCharacter(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetDungeonRankingInfo:
		arg := &msg.GetDungeonRankingInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetDungeonRankingInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetDungeonRankingList:
		arg := &msg.GetDungeonRankingListRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetDungeonRankingList(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetPersonalRankingInfo:
		arg := &msg.GetPersonalRankingInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetPersonalRankingInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetPersonalRankingList:
		arg := &msg.GetPersonalRankingListRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetPersonalRankingList(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetThreadComment:
		arg := &msg.GetThreadCommentRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetThreadComment(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetThreadHotComment:
		arg := &msg.GetThreadHotCommentRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetThreadHotComment(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetHeroThreadId:
		arg := &msg.GetHeroThreadIdRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetHeroThreadId(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PostComment:
		arg := &msg.PostCommentRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PostComment(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PraiseThread:
		arg := &msg.PraiseThreadRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PraiseThread(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PraiseComment:
		arg := &msg.PraiseCommentRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PraiseComment(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetUserProperties:
		arg := &msg.GetUserPropertiesRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetUserProperties(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_SetUserProperties:
		arg := &msg.SetUserPropertiesRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.SetUserProperties(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetAchievementAward:
		arg := &msg.GetAchievementAwardRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetAchievementAward(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetOperationActivityInfo:
		arg := &msg.GetOperationActivityInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetOperationActivityInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetActivtyAwardFisrtPay:
		arg := &msg.GetActivtyAwardFisrtPayRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetActivtyAwardFisrtPay(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetActivtyAwardSignInFirst7Day:
		arg := &msg.GetActivtyAwardSignInFirst7DayRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetActivtyAwardSignInFirst7Day(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetActivtyAwardSignIn30Day:
		arg := &msg.GetActivtyAwardSignIn30DayRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetActivtyAwardSignIn30Day(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetDungeonRule1:
		arg := &msg.GetDungeonRule1Request{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetDungeonRule1(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetDungeonRule2:
		arg := &msg.GetDungeonRule2Request{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetDungeonRule2(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_UseItem:
		arg := &msg.UseItemRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.UseItem(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GetVipInfo:
		arg := &msg.GetVipInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GetVipInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_VipYueKaMaterialGetAward:
		arg := &msg.VipYueKaMaterialGetAwardRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.VipYueKaMaterialGetAward(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayGetCallbackUrl:
		arg := &msg.PayGetCallbackUrlRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayGetCallbackUrl(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayPrepare:
		arg := &msg.PayPrepareRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayPrepare(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayVerifyReceipt:
		arg := &msg.PayVerifyReceiptRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayVerifyReceipt(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayAppleVerifyReceipt:
		arg := &msg.PayAppleVerifyReceiptRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayAppleVerifyReceipt(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayVerifyOrder:
		arg := &msg.PayVerifyOrderRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayVerifyOrder(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayListOrder:
		arg := &msg.PayListOrderRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayListOrder(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayGooglePurchase:
		arg := &msg.PayGooglePurchaseRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayGooglePurchase(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_PayGoogleConsume:
		arg := &msg.PayGoogleConsumeRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.PayGoogleConsume(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_AccountLogin:
		arg := &msg.AccountLoginRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.AccountLogin(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_AccountLogout:
		arg := &msg.AccountLogoutRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.AccountLogout(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GM_ActivateUser:
		arg := &msg.GM_ActivateUserRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GM_ActivateUser(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GM_ResetUser:
		arg := &msg.GM_ResetUserRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GM_ResetUser(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GM_CreateItem:
		arg := &msg.GM_CreateItemRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GM_CreateItem(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GM_SetMyMoney:
		arg := &msg.GM_SetMyMoneyRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GM_SetMyMoney(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GM_ResetJob:
		arg := &msg.GM_ResetJobRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GM_ResetJob(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	case msg.C_GM_SetVipInfo:
		arg := &msg.GM_SetVipInfoRequest{}
		err := jsoniter.UnmarshalFromString(req.Data, &arg)
		if err != nil {
			return msg.Err(req, msg.ErrDecoding, err.Error())
		}
		res := g.GM_SetVipInfo(req, arg)
		if res.Err != msg.Success {
			return msg.Err(req, res.Err, errcode_to_string(res.Err))
		}
		return msg.OK(req, res)

	default:
		return msg.Err(req, msg.ErrNotImplemented, errcode_to_string(msg.ErrNotImplemented))
	}
}
